#!/usr/bin/env python3
"""
bot_sol_signals.py
Bot Telegram g·ª≠i t√≠n hi·ªáu MUA/B√ÅN SOL d·ª±a tr√™n chi·∫øn l∆∞·ª£c EMA + RSI.
Khi k·∫øt n·ªëi Binance WebSocket th√†nh c√¥ng s·∫Ω g·ª≠i tin nh·∫Øn x√°c nh·∫≠n l√™n Telegram.
"""

import os
import time
import json
import logging
from collections import deque
from datetime import datetime
import threading

import pandas as pd
import numpy as np
import requests
from websocket import WebSocketApp

# ===== C·∫•u h√¨nh c∆° b·∫£n =====
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s %(levelname)s %(message)s")

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID   = os.getenv("CHAT_ID")

if not BOT_TOKEN or not CHAT_ID:
    raise EnvironmentError(
        "‚ö†Ô∏è Ch∆∞a t√¨m th·∫•y BOT_TOKEN ho·∫∑c CHAT_ID. "
        "H√£y v√†o Railway > Project > Variables ƒë·ªÉ th√™m ch√∫ng."
    )

SYMBOL         = os.getenv("SYMBOL", "solusdt")
INTERVAL       = os.getenv("INTERVAL", "1m")
EMA_SHORT      = int(os.getenv("EMA_SHORT", "50"))
EMA_LONG       = int(os.getenv("EMA_LONG", "200"))
RSI_PERIOD     = int(os.getenv("RSI_PERIOD", "14"))
RSI_OVERBOUGHT = int(os.getenv("RSI_OVERBOUGHT", "70"))
RSI_OVERSOLD   = int(os.getenv("RSI_OVERSOLD", "30"))

BINANCE_WS = f"wss://stream.binance.com:9443/ws/{SYMBOL}@kline_{INTERVAL}"
TELEGRAM_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

closes = deque(maxlen=1000)
last_signal = None
last_ema_short = None
last_ema_long  = None


def send_telegram(text: str):
    """G·ª≠i message Telegram"""
    try:
        r = requests.post(
            TELEGRAM_URL,
            json={"chat_id": CHAT_ID, "text": text, "parse_mode": "Markdown"},
            timeout=10
        )
        r.raise_for_status()
        logging.info("‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn Telegram")
    except Exception as e:
        logging.exception("L·ªói g·ª≠i Telegram: %s", e)


def compute_rsi(series: pd.Series, period: int = 14) -> pd.Series:
    """T√≠nh RSI v·ªõi ph∆∞∆°ng ph√°p EMA"""
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.ewm(alpha=1/period, adjust=False).mean()
    avg_loss = loss.ewm(alpha=1/period, adjust=False).mean()
    rs = avg_gain / avg_loss.replace(0, np.nan)
    return 100 - 100 / (1 + rs)


def on_message(ws, message):
    global last_signal, last_ema_short, last_ema_long

    try:
        data = json.loads(message)
        kline = data.get("k", {})
        if not kline.get("x", False):
            return

        close_price = float(kline["c"])
        close_time  = kline["T"]
        closes.append(close_price)

        if len(closes) < EMA_LONG + 5:
            return

        s = pd.Series(list(closes))
        ema_short = s.ewm(span=EMA_SHORT, adjust=False).mean().iloc[-1]
        ema_long  = s.ewm(span=EMA_LONG, adjust=False).mean().iloc[-1]
        rsi = compute_rsi(s, RSI_PERIOD).iloc[-1]

        prev_ema_short = last_ema_short
        prev_ema_long  = last_ema_long
        last_ema_short = ema_short
        last_ema_long  = ema_long

        signal = None
        ts = datetime.utcfromtimestamp(close_time/1000).strftime("%Y-%m-%d %H:%M:%S UTC")

        if prev_ema_short is not None and prev_ema_long is not None:
            if prev_ema_short <= prev_ema_long and ema_short > ema_long and rsi < RSI_OVERBOUGHT:
                signal = "BUY"
            elif prev_ema_short >= prev_ema_long and ema_short < ema_long and rsi > RSI_OVERSOLD:
                signal = "SELL"

        if signal and signal != last_signal:
            last_signal = signal
            text = (
                f"*{signal} signal for SOL*\n"
                f"Time: `{ts}`\n"
                f"Price: `{close_price:.4f} USDT`\n"
                f"EMA{EMA_SHORT}: `{ema_short:.4f}`\n"
                f"EMA{EMA_LONG}: `{ema_long:.4f}`\n"
                f"RSI({RSI_PERIOD}): `{rsi:.2f}`\n\n"
                f"_Rule:_ EMA{EMA_SHORT} x EMA{EMA_LONG} + RSI filter\n"
                f"_L∆∞u √Ω_: ch·ªâ ƒë·ªÉ tham kh·∫£o, kh√¥ng ph·∫£i khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞."
            )
            send_telegram(text)

    except Exception as e:
        logging.exception("L·ªói on_message: %s", e)


def on_open(ws):
    logging.info("‚úÖ K·∫øt n·ªëi Binance WebSocket th√†nh c√¥ng: %s", BINANCE_WS)
    # G·ª≠i th√¥ng b√°o Telegram khi k·∫øt n·ªëi th√†nh c√¥ng
    send_telegram("üöÄ Bot SOL ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi Binance WebSocket v√† s·∫µn s√†ng g·ª≠i t√≠n hi·ªáu!")


def on_error(ws, error):
    logging.error("‚ùå WebSocket error: %s", error)


def on_close(ws, code, reason):
    logging.warning("‚ö†Ô∏è WebSocket ƒë√≥ng: %s %s", code, reason)


def run_ws():
    while True:
        try:
            ws = WebSocketApp(
                BINANCE_WS,
                on_open=on_open,
                on_message=on_message,
                on_error=on_error,
                on_close=on_close
            )
            ws.run_forever(ping_interval=20, ping_timeout=10)
        except Exception as e:
            logging.exception("WS loop error: %s", e)
        logging.info("‚è≥ Reconnect sau 5 gi√¢y...")
        time.sleep(5)


if __name__ == "__main__":
    logging.info("üöÄ Bot SOL signal kh·ªüi ƒë·ªông...")
    t = threading.Thread(target=run_ws, daemon=True)
    t.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("ƒê√£ d·ª´ng bot.")
